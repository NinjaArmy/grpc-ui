/* This is where the magic happens 
   Protocol Buffers are language and platfrom neutral
   We define our service definitions and messages here.
   This is written in IDL (Interface Definition Language) --> it's like an interface between the client and server

*/
syntax = "proto3";

/* Defining a UserInterface item accordingly to UserInterfaceDescription.kt 
   There are not a lot of datatypes in proto
*/
message UserInterface {
    string id = 1;
    string appliance_id = 2;
   
    message Layout {
        string id = 1;
        enum ApplianceType {
            /* Couldnt find the appliancedescription need paramaters here */
            MANUFACTURER = 0;
            MODEL = 1;
        }
        ApplianceType appliance_type = 2;
        string views = 3;
    }
    
    message View {
        string id = 0;
        enum ViewType {
            STANDBY = 0;
            IDENTIFICATION = 1;
            HOMESCREEN = 2;
            ACTIVE_PROGRAM = 3;
            LIBRARY = 4;
            PROGRAM_SETTINGS = 5;
        }
        ViewType type = 2;
    }
    /*  Active Display
        The display could show the progress of a program
        or the homescreen
    */
    oneof display {
        HomeScreenDisplay home = 1;
        ProgressBarDisplay progress = 2;
        PageScreenDisplay page  =  3;
    }

    message Notifcation {
        string id = 1;
        /* Enumeration for notifcation type */
        enum NotificationType {
            DOOR_OPEN = 0;
            PROGRAM_FINISHED = 1;
            ADD_PROGRAM = 2;
            FUNCTION_NOT_AVAILABLE = 3;
            EMPTY = 4; //represents missing resources (e.g. Milk, Beans, Laundry Detergent, etc.)
        }
        NotificationType type = 2;
    
        string topic = 3;
        string description = 4;
    }

    message userInterfaceParameters{
        string font = 1;
        string font_size_multiplier = 2;
        string contrast = 3;
        string element_size = 4;
        bool font_bold = 5;
        bool font_italic = 6;
        bool font_underline = 7;
    }
    string categories = 3;
    string timestamp = 4;
}

/* 
    HomeScreen:
    Standard Navigation Wizard
    Slider underneath and Button to start or navigate
*/
message HomeScreenDisplay {
    message Wizard {
        string title = 1;
        message Page {
            string description = 1;
            repeated action = 2;
        }
        repeated Page pages = 2;
        int x = 3;
        int y = 4;
        int font_size = 5;

        message WizzardButton {
            string content = 1;
            string path_entry = 2;
            int target_menu_states = 3;
        }

        message CheckSlider {
            string description = 1;
            string info_button = 2;
            bool state = 3;
            int info_menu_state = 4;
        }
    }
    message Slider {
        string id = 1;
        int32 min = 2;
        int32 max = 3;
        int32 step = 4;
        int32 default_value = 5;
        bool vertical = 6;
        bool legend = 7;
        int32 counter = 8;
        string parameter_id = 9;
        int32 width = 10;
        string unit = 11;
        int32 x = 12;
        int32 y = 13;
        int32 font_size = 14;
        map<K,V> value_maps = 15;
    }
    message Button {
        string title = 1;
        string icon = 2;
        string navigate_to = 3;
        string executable = 4;
        string program_id = 5;
        string default_value = 6;
        int32 x = 7;
        int32 y = 8;
        int32 font_size = 9;
    }
}

/* 
    ProgressBarDisplay: Only active when a program is running
    Shows a progress bar and a button to cancel the process
*/
message ProgressBarDisplay {
    int x = 1;
    int y = 2;
    /* Icon of a coffe etc.. */
    string icon = 3;

    /* Cancel Button */
    message Button {
        string title = 1;
        string icon = 2;
        string navigate_to = 3;
        int32 x = 4;
        int32 y = 5;
        int32 font_size = 6;
    }
}

/* 
    PageDisplay: 
    Shows a standard page display
*/
message PageScreenDisplay {
    message Wizard {
        string title = 1;
        message Page {
            string description = 1;
            repeated action = 2;
        }
        repeated Page pages = 2;
        int x = 3;
        int y = 4;
        int font_size = 5;

        message WizzardButton {
            string content = 1;
            string path_entry = 2;
            int target_menu_states = 3;
        }

        message CheckSlider {
            string description = 1;
            string info_button = 2;
            bool state = 3;
            int info_menu_state = 4;
        }
    }

    message Button {
        string title = 1;
        string icon = 2;
        string navigate_to = 3;
        string executable = 4;
        string program_id = 5;
        string default_value = 6;
        int32 x = 7;
        int32 y = 8;
        int32 font_size = 9;
    }

}

message Empty {}

message UserInterfaceId {
    string id = 1;
}

/* Response Object */
message UserInterfaceList {
    repeated UserInterface userInterfaces = 1;
}

/* Defining RPC service
   The protocol buffer compiler will generate service interface code and stubs in our chosen language. 
 */
service UserInterfaceService {
    /* requires an empty object as argument and return an array/list of Userinterfaces */
    rpc GetAllUserInterface (Empty) returns (UserInterfaceList) {}

    /* requires the UserInterfaceId as argument and returns the UserInterface Object.. */
    rpc GetUserInterface(UserInterfaceId) returns (UserInterface) {}
    rpc AddUserInterface (UserInterface) returns (UserInterface) {}
    rpc EditUserInterface (UserInterface) returns (UserInterface) {}
    rpc DeleteUserInterface (UserInterfaceId) returns (Empty) {}
}


